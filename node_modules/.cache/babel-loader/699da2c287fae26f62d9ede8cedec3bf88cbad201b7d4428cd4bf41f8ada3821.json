{"ast":null,"code":"// User submission service for handling user-submitted terms\nimport { userSubmittedData } from '../data/userSubmittedData';\nclass UserSubmissionService {\n  constructor() {\n    // Use localStorage as persistent storage simulation\n    this.storageKey = 'userSubmittedTerms';\n    this.initializeStorage();\n  }\n  initializeStorage() {\n    const existingData = localStorage.getItem(this.storageKey);\n    if (!existingData) {\n      // No localStorage data, initialize with file data\n      localStorage.setItem(this.storageKey, JSON.stringify(userSubmittedData));\n    } else {\n      // Check if localStorage version matches file version\n      try {\n        const parsed = JSON.parse(existingData);\n        if (!parsed.version || parsed.version !== userSubmittedData.version) {\n          // Version mismatch, merge file data with any new localStorage submissions\n          const mergedData = this.mergeFileWithLocalStorage(parsed);\n          localStorage.setItem(this.storageKey, JSON.stringify(mergedData));\n        }\n      } catch (error) {\n        // Corrupted localStorage, reset with file data\n        localStorage.setItem(this.storageKey, JSON.stringify(userSubmittedData));\n      }\n    }\n  }\n  mergeFileWithLocalStorage(localData) {\n    // Start with file data as base\n    const merged = {\n      ...userSubmittedData\n    };\n    if (localData.terms) {\n      // Keep any new submissions that aren't in the file\n      const fileTermIds = new Set(userSubmittedData.terms.map(t => t.id));\n      const newLocalTerms = localData.terms.filter(t => !fileTermIds.has(t.id));\n      merged.terms = [...userSubmittedData.terms, ...newLocalTerms];\n    }\n    if (localData.acronyms) {\n      // Keep any new submissions that aren't in the file\n      const fileAcronymIds = new Set(userSubmittedData.acronyms.map(a => a.id));\n      const newLocalAcronyms = localData.acronyms.filter(a => !fileAcronymIds.has(a.id));\n      merged.acronyms = [...userSubmittedData.acronyms, ...newLocalAcronyms];\n    }\n    return merged;\n  }\n  getUserSubmissions() {\n    try {\n      const data = localStorage.getItem(this.storageKey);\n      return data ? JSON.parse(data) : userSubmittedData;\n    } catch (error) {\n      console.error('Error reading user submissions:', error);\n      return userSubmittedData;\n    }\n  }\n  saveUserSubmissions(data) {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(data));\n      return true;\n    } catch (error) {\n      console.error('Error saving user submissions:', error);\n      return false;\n    }\n  }\n  submitTerm(termData) {\n    const submissions = this.getUserSubmissions();\n    const newTerm = {\n      ...termData,\n      id: `user_${Date.now()}`,\n      submittedDate: new Date().toISOString().split('T')[0],\n      status: 'pending'\n    };\n    submissions.terms.push(newTerm);\n    return this.saveUserSubmissions(submissions) ? newTerm : null;\n  }\n  submitAcronym(acronymData) {\n    const submissions = this.getUserSubmissions();\n    const newAcronym = {\n      ...acronymData,\n      id: `user_${Date.now()}`,\n      submittedDate: new Date().toISOString().split('T')[0],\n      status: 'pending'\n    };\n    submissions.acronyms.push(newAcronym);\n    return this.saveUserSubmissions(submissions) ? newAcronym : null;\n  }\n  getApprovedTerms() {\n    const submissions = this.getUserSubmissions();\n    return submissions.terms.filter(term => term.status === 'approved');\n  }\n  getApprovedAcronyms() {\n    const submissions = this.getUserSubmissions();\n    return submissions.acronyms.filter(acronym => acronym.status === 'approved');\n  }\n  getPendingTerms() {\n    const submissions = this.getUserSubmissions();\n    return submissions.terms.filter(term => term.status === 'pending');\n  }\n  getPendingAcronyms() {\n    const submissions = this.getUserSubmissions();\n    return submissions.acronyms.filter(acronym => acronym.status === 'pending');\n  }\n\n  // For admin functionality (future use)\n  approveTerm(termId) {\n    const submissions = this.getUserSubmissions();\n    const term = submissions.terms.find(t => t.id === termId);\n    if (term) {\n      term.status = 'approved';\n      return this.saveUserSubmissions(submissions);\n    }\n    return false;\n  }\n  rejectTerm(termId) {\n    const submissions = this.getUserSubmissions();\n    const term = submissions.terms.find(t => t.id === termId);\n    if (term) {\n      term.status = 'rejected';\n      return this.saveUserSubmissions(submissions);\n    }\n    return false;\n  }\n  approveAcronym(acronymId) {\n    const submissions = this.getUserSubmissions();\n    const acronym = submissions.acronyms.find(a => a.id === acronymId);\n    if (acronym) {\n      acronym.status = 'approved';\n      return this.saveUserSubmissions(submissions);\n    }\n    return false;\n  }\n  rejectAcronym(acronymId) {\n    const submissions = this.getUserSubmissions();\n    const acronym = submissions.acronyms.find(a => a.id === acronymId);\n    if (acronym) {\n      acronym.status = 'rejected';\n      return this.saveUserSubmissions(submissions);\n    }\n    return false;\n  }\n\n  // Get combined context for translation service\n  getContextForTranslation() {\n    const approvedTerms = this.getApprovedTerms();\n    const approvedAcronyms = this.getApprovedAcronyms();\n    const termsText = approvedTerms.map(item => `${item.term}: ${item.definition}`).join('\\n');\n    const acronymsText = approvedAcronyms.map(item => `${item.acronym}: ${item.fullName}`).join('\\n');\n    return {\n      userTermsText: termsText,\n      userAcronymsText: acronymsText,\n      userCombinedText: termsText + '\\n' + acronymsText\n    };\n  }\n  // Method to reset localStorage with current file data (useful for development)\n  resetToFileData() {\n    localStorage.setItem(this.storageKey, JSON.stringify(userSubmittedData));\n    return userSubmittedData;\n  }\n\n  // Method to get a summary of current data\n  getDataSummary() {\n    const submissions = this.getUserSubmissions();\n    return {\n      totalTerms: submissions.terms.length,\n      approvedTerms: submissions.terms.filter(t => t.status === 'approved').length,\n      pendingTerms: submissions.terms.filter(t => t.status === 'pending').length,\n      totalAcronyms: submissions.acronyms.length,\n      approvedAcronyms: submissions.acronyms.filter(a => a.status === 'approved').length,\n      pendingAcronyms: submissions.acronyms.filter(a => a.status === 'pending').length\n    };\n  }\n}\n\n// Export singleton instance\nexport const userSubmissionService = new UserSubmissionService();","map":{"version":3,"names":["userSubmittedData","UserSubmissionService","constructor","storageKey","initializeStorage","existingData","localStorage","getItem","setItem","JSON","stringify","parsed","parse","version","mergedData","mergeFileWithLocalStorage","error","localData","merged","terms","fileTermIds","Set","map","t","id","newLocalTerms","filter","has","acronyms","fileAcronymIds","a","newLocalAcronyms","getUserSubmissions","data","console","saveUserSubmissions","submitTerm","termData","submissions","newTerm","Date","now","submittedDate","toISOString","split","status","push","submitAcronym","acronymData","newAcronym","getApprovedTerms","term","getApprovedAcronyms","acronym","getPendingTerms","getPendingAcronyms","approveTerm","termId","find","rejectTerm","approveAcronym","acronymId","rejectAcronym","getContextForTranslation","approvedTerms","approvedAcronyms","termsText","item","definition","join","acronymsText","fullName","userTermsText","userAcronymsText","userCombinedText","resetToFileData","getDataSummary","totalTerms","length","pendingTerms","totalAcronyms","pendingAcronyms","userSubmissionService"],"sources":["C:/Users/2417696/OneDrive - Cognizant/Documents/vscode/VibeCoding2025/new-consultingo/WordWise/src/services/userSubmissionService.js"],"sourcesContent":["// User submission service for handling user-submitted terms\r\nimport { userSubmittedData } from '../data/userSubmittedData';\r\n\r\nclass UserSubmissionService {\r\n  constructor() {\r\n    // Use localStorage as persistent storage simulation\r\n    this.storageKey = 'userSubmittedTerms';\r\n    this.initializeStorage();\r\n  }\r\n  initializeStorage() {\r\n    const existingData = localStorage.getItem(this.storageKey);\r\n    \r\n    if (!existingData) {\r\n      // No localStorage data, initialize with file data\r\n      localStorage.setItem(this.storageKey, JSON.stringify(userSubmittedData));\r\n    } else {\r\n      // Check if localStorage version matches file version\r\n      try {\r\n        const parsed = JSON.parse(existingData);\r\n        if (!parsed.version || parsed.version !== userSubmittedData.version) {\r\n          // Version mismatch, merge file data with any new localStorage submissions\r\n          const mergedData = this.mergeFileWithLocalStorage(parsed);\r\n          localStorage.setItem(this.storageKey, JSON.stringify(mergedData));\r\n        }\r\n      } catch (error) {\r\n        // Corrupted localStorage, reset with file data\r\n        localStorage.setItem(this.storageKey, JSON.stringify(userSubmittedData));\r\n      }\r\n    }\r\n  }\r\n\r\n  mergeFileWithLocalStorage(localData) {\r\n    // Start with file data as base\r\n    const merged = { ...userSubmittedData };\r\n    \r\n    if (localData.terms) {\r\n      // Keep any new submissions that aren't in the file\r\n      const fileTermIds = new Set(userSubmittedData.terms.map(t => t.id));\r\n      const newLocalTerms = localData.terms.filter(t => !fileTermIds.has(t.id));\r\n      merged.terms = [...userSubmittedData.terms, ...newLocalTerms];\r\n    }\r\n    \r\n    if (localData.acronyms) {\r\n      // Keep any new submissions that aren't in the file\r\n      const fileAcronymIds = new Set(userSubmittedData.acronyms.map(a => a.id));\r\n      const newLocalAcronyms = localData.acronyms.filter(a => !fileAcronymIds.has(a.id));\r\n      merged.acronyms = [...userSubmittedData.acronyms, ...newLocalAcronyms];\r\n    }\r\n    \r\n    return merged;\r\n  }\r\n\r\n  getUserSubmissions() {\r\n    try {\r\n      const data = localStorage.getItem(this.storageKey);\r\n      return data ? JSON.parse(data) : userSubmittedData;\r\n    } catch (error) {\r\n      console.error('Error reading user submissions:', error);\r\n      return userSubmittedData;\r\n    }\r\n  }\r\n\r\n  saveUserSubmissions(data) {\r\n    try {\r\n      localStorage.setItem(this.storageKey, JSON.stringify(data));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error saving user submissions:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  submitTerm(termData) {\r\n    const submissions = this.getUserSubmissions();\r\n    \r\n    const newTerm = {\r\n      ...termData,\r\n      id: `user_${Date.now()}`,\r\n      submittedDate: new Date().toISOString().split('T')[0],\r\n      status: 'pending'\r\n    };\r\n\r\n    submissions.terms.push(newTerm);\r\n    return this.saveUserSubmissions(submissions) ? newTerm : null;\r\n  }\r\n\r\n  submitAcronym(acronymData) {\r\n    const submissions = this.getUserSubmissions();\r\n    \r\n    const newAcronym = {\r\n      ...acronymData,\r\n      id: `user_${Date.now()}`,\r\n      submittedDate: new Date().toISOString().split('T')[0],\r\n      status: 'pending'\r\n    };\r\n\r\n    submissions.acronyms.push(newAcronym);\r\n    return this.saveUserSubmissions(submissions) ? newAcronym : null;\r\n  }\r\n\r\n  getApprovedTerms() {\r\n    const submissions = this.getUserSubmissions();\r\n    return submissions.terms.filter(term => term.status === 'approved');\r\n  }\r\n\r\n  getApprovedAcronyms() {\r\n    const submissions = this.getUserSubmissions();\r\n    return submissions.acronyms.filter(acronym => acronym.status === 'approved');\r\n  }\r\n\r\n  getPendingTerms() {\r\n    const submissions = this.getUserSubmissions();\r\n    return submissions.terms.filter(term => term.status === 'pending');\r\n  }\r\n\r\n  getPendingAcronyms() {\r\n    const submissions = this.getUserSubmissions();\r\n    return submissions.acronyms.filter(acronym => acronym.status === 'pending');\r\n  }\r\n\r\n  // For admin functionality (future use)\r\n  approveTerm(termId) {\r\n    const submissions = this.getUserSubmissions();\r\n    const term = submissions.terms.find(t => t.id === termId);\r\n    if (term) {\r\n      term.status = 'approved';\r\n      return this.saveUserSubmissions(submissions);\r\n    }\r\n    return false;\r\n  }\r\n  rejectTerm(termId) {\r\n    const submissions = this.getUserSubmissions();\r\n    const term = submissions.terms.find(t => t.id === termId);\r\n    if (term) {\r\n      term.status = 'rejected';\r\n      return this.saveUserSubmissions(submissions);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  approveAcronym(acronymId) {\r\n    const submissions = this.getUserSubmissions();\r\n    const acronym = submissions.acronyms.find(a => a.id === acronymId);\r\n    if (acronym) {\r\n      acronym.status = 'approved';\r\n      return this.saveUserSubmissions(submissions);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  rejectAcronym(acronymId) {\r\n    const submissions = this.getUserSubmissions();\r\n    const acronym = submissions.acronyms.find(a => a.id === acronymId);\r\n    if (acronym) {\r\n      acronym.status = 'rejected';\r\n      return this.saveUserSubmissions(submissions);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Get combined context for translation service\r\n  getContextForTranslation() {\r\n    const approvedTerms = this.getApprovedTerms();\r\n    const approvedAcronyms = this.getApprovedAcronyms();\r\n\r\n    const termsText = approvedTerms\r\n      .map(item => `${item.term}: ${item.definition}`)\r\n      .join('\\n');\r\n      const acronymsText = approvedAcronyms\r\n      .map(item => `${item.acronym}: ${item.fullName}`)\r\n      .join('\\n');\r\n    \r\n    return {\r\n      userTermsText: termsText,\r\n      userAcronymsText: acronymsText,\r\n      userCombinedText: termsText + '\\n' + acronymsText\r\n    };\r\n  }\r\n  // Method to reset localStorage with current file data (useful for development)\r\n  resetToFileData() {\r\n    localStorage.setItem(this.storageKey, JSON.stringify(userSubmittedData));\r\n    return userSubmittedData;\r\n  }\r\n\r\n  // Method to get a summary of current data\r\n  getDataSummary() {\r\n    const submissions = this.getUserSubmissions();\r\n    return {\r\n      totalTerms: submissions.terms.length,\r\n      approvedTerms: submissions.terms.filter(t => t.status === 'approved').length,\r\n      pendingTerms: submissions.terms.filter(t => t.status === 'pending').length,\r\n      totalAcronyms: submissions.acronyms.length,\r\n      approvedAcronyms: submissions.acronyms.filter(a => a.status === 'approved').length,\r\n      pendingAcronyms: submissions.acronyms.filter(a => a.status === 'pending').length\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const userSubmissionService = new UserSubmissionService();\r\n"],"mappings":"AAAA;AACA,SAASA,iBAAiB,QAAQ,2BAA2B;AAE7D,MAAMC,qBAAqB,CAAC;EAC1BC,WAAWA,CAAA,EAAG;IACZ;IACA,IAAI,CAACC,UAAU,GAAG,oBAAoB;IACtC,IAAI,CAACC,iBAAiB,CAAC,CAAC;EAC1B;EACAA,iBAAiBA,CAAA,EAAG;IAClB,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACJ,UAAU,CAAC;IAE1D,IAAI,CAACE,YAAY,EAAE;MACjB;MACAC,YAAY,CAACE,OAAO,CAAC,IAAI,CAACL,UAAU,EAAEM,IAAI,CAACC,SAAS,CAACV,iBAAiB,CAAC,CAAC;IAC1E,CAAC,MAAM;MACL;MACA,IAAI;QACF,MAAMW,MAAM,GAAGF,IAAI,CAACG,KAAK,CAACP,YAAY,CAAC;QACvC,IAAI,CAACM,MAAM,CAACE,OAAO,IAAIF,MAAM,CAACE,OAAO,KAAKb,iBAAiB,CAACa,OAAO,EAAE;UACnE;UACA,MAAMC,UAAU,GAAG,IAAI,CAACC,yBAAyB,CAACJ,MAAM,CAAC;UACzDL,YAAY,CAACE,OAAO,CAAC,IAAI,CAACL,UAAU,EAAEM,IAAI,CAACC,SAAS,CAACI,UAAU,CAAC,CAAC;QACnE;MACF,CAAC,CAAC,OAAOE,KAAK,EAAE;QACd;QACAV,YAAY,CAACE,OAAO,CAAC,IAAI,CAACL,UAAU,EAAEM,IAAI,CAACC,SAAS,CAACV,iBAAiB,CAAC,CAAC;MAC1E;IACF;EACF;EAEAe,yBAAyBA,CAACE,SAAS,EAAE;IACnC;IACA,MAAMC,MAAM,GAAG;MAAE,GAAGlB;IAAkB,CAAC;IAEvC,IAAIiB,SAAS,CAACE,KAAK,EAAE;MACnB;MACA,MAAMC,WAAW,GAAG,IAAIC,GAAG,CAACrB,iBAAiB,CAACmB,KAAK,CAACG,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,CAAC,CAAC;MACnE,MAAMC,aAAa,GAAGR,SAAS,CAACE,KAAK,CAACO,MAAM,CAACH,CAAC,IAAI,CAACH,WAAW,CAACO,GAAG,CAACJ,CAAC,CAACC,EAAE,CAAC,CAAC;MACzEN,MAAM,CAACC,KAAK,GAAG,CAAC,GAAGnB,iBAAiB,CAACmB,KAAK,EAAE,GAAGM,aAAa,CAAC;IAC/D;IAEA,IAAIR,SAAS,CAACW,QAAQ,EAAE;MACtB;MACA,MAAMC,cAAc,GAAG,IAAIR,GAAG,CAACrB,iBAAiB,CAAC4B,QAAQ,CAACN,GAAG,CAACQ,CAAC,IAAIA,CAAC,CAACN,EAAE,CAAC,CAAC;MACzE,MAAMO,gBAAgB,GAAGd,SAAS,CAACW,QAAQ,CAACF,MAAM,CAACI,CAAC,IAAI,CAACD,cAAc,CAACF,GAAG,CAACG,CAAC,CAACN,EAAE,CAAC,CAAC;MAClFN,MAAM,CAACU,QAAQ,GAAG,CAAC,GAAG5B,iBAAiB,CAAC4B,QAAQ,EAAE,GAAGG,gBAAgB,CAAC;IACxE;IAEA,OAAOb,MAAM;EACf;EAEAc,kBAAkBA,CAAA,EAAG;IACnB,IAAI;MACF,MAAMC,IAAI,GAAG3B,YAAY,CAACC,OAAO,CAAC,IAAI,CAACJ,UAAU,CAAC;MAClD,OAAO8B,IAAI,GAAGxB,IAAI,CAACG,KAAK,CAACqB,IAAI,CAAC,GAAGjC,iBAAiB;IACpD,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACdkB,OAAO,CAAClB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,OAAOhB,iBAAiB;IAC1B;EACF;EAEAmC,mBAAmBA,CAACF,IAAI,EAAE;IACxB,IAAI;MACF3B,YAAY,CAACE,OAAO,CAAC,IAAI,CAACL,UAAU,EAAEM,IAAI,CAACC,SAAS,CAACuB,IAAI,CAAC,CAAC;MAC3D,OAAO,IAAI;IACb,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACdkB,OAAO,CAAClB,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,OAAO,KAAK;IACd;EACF;EAEAoB,UAAUA,CAACC,QAAQ,EAAE;IACnB,MAAMC,WAAW,GAAG,IAAI,CAACN,kBAAkB,CAAC,CAAC;IAE7C,MAAMO,OAAO,GAAG;MACd,GAAGF,QAAQ;MACXb,EAAE,EAAE,QAAQgB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MACxBC,aAAa,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACrDC,MAAM,EAAE;IACV,CAAC;IAEDP,WAAW,CAACnB,KAAK,CAAC2B,IAAI,CAACP,OAAO,CAAC;IAC/B,OAAO,IAAI,CAACJ,mBAAmB,CAACG,WAAW,CAAC,GAAGC,OAAO,GAAG,IAAI;EAC/D;EAEAQ,aAAaA,CAACC,WAAW,EAAE;IACzB,MAAMV,WAAW,GAAG,IAAI,CAACN,kBAAkB,CAAC,CAAC;IAE7C,MAAMiB,UAAU,GAAG;MACjB,GAAGD,WAAW;MACdxB,EAAE,EAAE,QAAQgB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MACxBC,aAAa,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACrDC,MAAM,EAAE;IACV,CAAC;IAEDP,WAAW,CAACV,QAAQ,CAACkB,IAAI,CAACG,UAAU,CAAC;IACrC,OAAO,IAAI,CAACd,mBAAmB,CAACG,WAAW,CAAC,GAAGW,UAAU,GAAG,IAAI;EAClE;EAEAC,gBAAgBA,CAAA,EAAG;IACjB,MAAMZ,WAAW,GAAG,IAAI,CAACN,kBAAkB,CAAC,CAAC;IAC7C,OAAOM,WAAW,CAACnB,KAAK,CAACO,MAAM,CAACyB,IAAI,IAAIA,IAAI,CAACN,MAAM,KAAK,UAAU,CAAC;EACrE;EAEAO,mBAAmBA,CAAA,EAAG;IACpB,MAAMd,WAAW,GAAG,IAAI,CAACN,kBAAkB,CAAC,CAAC;IAC7C,OAAOM,WAAW,CAACV,QAAQ,CAACF,MAAM,CAAC2B,OAAO,IAAIA,OAAO,CAACR,MAAM,KAAK,UAAU,CAAC;EAC9E;EAEAS,eAAeA,CAAA,EAAG;IAChB,MAAMhB,WAAW,GAAG,IAAI,CAACN,kBAAkB,CAAC,CAAC;IAC7C,OAAOM,WAAW,CAACnB,KAAK,CAACO,MAAM,CAACyB,IAAI,IAAIA,IAAI,CAACN,MAAM,KAAK,SAAS,CAAC;EACpE;EAEAU,kBAAkBA,CAAA,EAAG;IACnB,MAAMjB,WAAW,GAAG,IAAI,CAACN,kBAAkB,CAAC,CAAC;IAC7C,OAAOM,WAAW,CAACV,QAAQ,CAACF,MAAM,CAAC2B,OAAO,IAAIA,OAAO,CAACR,MAAM,KAAK,SAAS,CAAC;EAC7E;;EAEA;EACAW,WAAWA,CAACC,MAAM,EAAE;IAClB,MAAMnB,WAAW,GAAG,IAAI,CAACN,kBAAkB,CAAC,CAAC;IAC7C,MAAMmB,IAAI,GAAGb,WAAW,CAACnB,KAAK,CAACuC,IAAI,CAACnC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKiC,MAAM,CAAC;IACzD,IAAIN,IAAI,EAAE;MACRA,IAAI,CAACN,MAAM,GAAG,UAAU;MACxB,OAAO,IAAI,CAACV,mBAAmB,CAACG,WAAW,CAAC;IAC9C;IACA,OAAO,KAAK;EACd;EACAqB,UAAUA,CAACF,MAAM,EAAE;IACjB,MAAMnB,WAAW,GAAG,IAAI,CAACN,kBAAkB,CAAC,CAAC;IAC7C,MAAMmB,IAAI,GAAGb,WAAW,CAACnB,KAAK,CAACuC,IAAI,CAACnC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKiC,MAAM,CAAC;IACzD,IAAIN,IAAI,EAAE;MACRA,IAAI,CAACN,MAAM,GAAG,UAAU;MACxB,OAAO,IAAI,CAACV,mBAAmB,CAACG,WAAW,CAAC;IAC9C;IACA,OAAO,KAAK;EACd;EAEAsB,cAAcA,CAACC,SAAS,EAAE;IACxB,MAAMvB,WAAW,GAAG,IAAI,CAACN,kBAAkB,CAAC,CAAC;IAC7C,MAAMqB,OAAO,GAAGf,WAAW,CAACV,QAAQ,CAAC8B,IAAI,CAAC5B,CAAC,IAAIA,CAAC,CAACN,EAAE,KAAKqC,SAAS,CAAC;IAClE,IAAIR,OAAO,EAAE;MACXA,OAAO,CAACR,MAAM,GAAG,UAAU;MAC3B,OAAO,IAAI,CAACV,mBAAmB,CAACG,WAAW,CAAC;IAC9C;IACA,OAAO,KAAK;EACd;EAEAwB,aAAaA,CAACD,SAAS,EAAE;IACvB,MAAMvB,WAAW,GAAG,IAAI,CAACN,kBAAkB,CAAC,CAAC;IAC7C,MAAMqB,OAAO,GAAGf,WAAW,CAACV,QAAQ,CAAC8B,IAAI,CAAC5B,CAAC,IAAIA,CAAC,CAACN,EAAE,KAAKqC,SAAS,CAAC;IAClE,IAAIR,OAAO,EAAE;MACXA,OAAO,CAACR,MAAM,GAAG,UAAU;MAC3B,OAAO,IAAI,CAACV,mBAAmB,CAACG,WAAW,CAAC;IAC9C;IACA,OAAO,KAAK;EACd;;EAEA;EACAyB,wBAAwBA,CAAA,EAAG;IACzB,MAAMC,aAAa,GAAG,IAAI,CAACd,gBAAgB,CAAC,CAAC;IAC7C,MAAMe,gBAAgB,GAAG,IAAI,CAACb,mBAAmB,CAAC,CAAC;IAEnD,MAAMc,SAAS,GAAGF,aAAa,CAC5B1C,GAAG,CAAC6C,IAAI,IAAI,GAAGA,IAAI,CAAChB,IAAI,KAAKgB,IAAI,CAACC,UAAU,EAAE,CAAC,CAC/CC,IAAI,CAAC,IAAI,CAAC;IACX,MAAMC,YAAY,GAAGL,gBAAgB,CACpC3C,GAAG,CAAC6C,IAAI,IAAI,GAAGA,IAAI,CAACd,OAAO,KAAKc,IAAI,CAACI,QAAQ,EAAE,CAAC,CAChDF,IAAI,CAAC,IAAI,CAAC;IAEb,OAAO;MACLG,aAAa,EAAEN,SAAS;MACxBO,gBAAgB,EAAEH,YAAY;MAC9BI,gBAAgB,EAAER,SAAS,GAAG,IAAI,GAAGI;IACvC,CAAC;EACH;EACA;EACAK,eAAeA,CAAA,EAAG;IAChBrE,YAAY,CAACE,OAAO,CAAC,IAAI,CAACL,UAAU,EAAEM,IAAI,CAACC,SAAS,CAACV,iBAAiB,CAAC,CAAC;IACxE,OAAOA,iBAAiB;EAC1B;;EAEA;EACA4E,cAAcA,CAAA,EAAG;IACf,MAAMtC,WAAW,GAAG,IAAI,CAACN,kBAAkB,CAAC,CAAC;IAC7C,OAAO;MACL6C,UAAU,EAAEvC,WAAW,CAACnB,KAAK,CAAC2D,MAAM;MACpCd,aAAa,EAAE1B,WAAW,CAACnB,KAAK,CAACO,MAAM,CAACH,CAAC,IAAIA,CAAC,CAACsB,MAAM,KAAK,UAAU,CAAC,CAACiC,MAAM;MAC5EC,YAAY,EAAEzC,WAAW,CAACnB,KAAK,CAACO,MAAM,CAACH,CAAC,IAAIA,CAAC,CAACsB,MAAM,KAAK,SAAS,CAAC,CAACiC,MAAM;MAC1EE,aAAa,EAAE1C,WAAW,CAACV,QAAQ,CAACkD,MAAM;MAC1Cb,gBAAgB,EAAE3B,WAAW,CAACV,QAAQ,CAACF,MAAM,CAACI,CAAC,IAAIA,CAAC,CAACe,MAAM,KAAK,UAAU,CAAC,CAACiC,MAAM;MAClFG,eAAe,EAAE3C,WAAW,CAACV,QAAQ,CAACF,MAAM,CAACI,CAAC,IAAIA,CAAC,CAACe,MAAM,KAAK,SAAS,CAAC,CAACiC;IAC5E,CAAC;EACH;AACF;;AAEA;AACA,OAAO,MAAMI,qBAAqB,GAAG,IAAIjF,qBAAqB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}