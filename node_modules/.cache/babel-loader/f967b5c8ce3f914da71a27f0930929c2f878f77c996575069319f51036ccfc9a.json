{"ast":null,"code":"// User submission service for handling user-submitted terms\nimport { userSubmittedData } from '../data/userSubmittedData';\nclass UserSubmissionService {\n  constructor() {\n    // Use localStorage as persistent storage simulation\n    this.storageKey = 'userSubmittedTerms';\n    this.initializeStorage();\n  }\n  initializeStorage() {\n    const existingData = localStorage.getItem(this.storageKey);\n    if (!existingData) {\n      localStorage.setItem(this.storageKey, JSON.stringify(userSubmittedData));\n    }\n  }\n  getUserSubmissions() {\n    try {\n      const data = localStorage.getItem(this.storageKey);\n      return data ? JSON.parse(data) : userSubmittedData;\n    } catch (error) {\n      console.error('Error reading user submissions:', error);\n      return userSubmittedData;\n    }\n  }\n  saveUserSubmissions(data) {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(data));\n      return true;\n    } catch (error) {\n      console.error('Error saving user submissions:', error);\n      return false;\n    }\n  }\n  submitTerm(termData) {\n    const submissions = this.getUserSubmissions();\n    const newTerm = {\n      ...termData,\n      id: `user_${Date.now()}`,\n      submittedDate: new Date().toISOString().split('T')[0],\n      status: 'pending'\n    };\n    submissions.terms.push(newTerm);\n    return this.saveUserSubmissions(submissions) ? newTerm : null;\n  }\n  submitAcronym(acronymData) {\n    const submissions = this.getUserSubmissions();\n    const newAcronym = {\n      ...acronymData,\n      id: `user_${Date.now()}`,\n      submittedDate: new Date().toISOString().split('T')[0],\n      status: 'pending'\n    };\n    submissions.acronyms.push(newAcronym);\n    return this.saveUserSubmissions(submissions) ? newAcronym : null;\n  }\n  getApprovedTerms() {\n    const submissions = this.getUserSubmissions();\n    return submissions.terms.filter(term => term.status === 'approved');\n  }\n  getApprovedAcronyms() {\n    const submissions = this.getUserSubmissions();\n    return submissions.acronyms.filter(acronym => acronym.status === 'approved');\n  }\n  getPendingTerms() {\n    const submissions = this.getUserSubmissions();\n    return submissions.terms.filter(term => term.status === 'pending');\n  }\n  getPendingAcronyms() {\n    const submissions = this.getUserSubmissions();\n    return submissions.acronyms.filter(acronym => acronym.status === 'pending');\n  }\n\n  // For admin functionality (future use)\n  approveTerm(termId) {\n    const submissions = this.getUserSubmissions();\n    const term = submissions.terms.find(t => t.id === termId);\n    if (term) {\n      term.status = 'approved';\n      return this.saveUserSubmissions(submissions);\n    }\n    return false;\n  }\n  rejectTerm(termId) {\n    const submissions = this.getUserSubmissions();\n    const term = submissions.terms.find(t => t.id === termId);\n    if (term) {\n      term.status = 'rejected';\n      return this.saveUserSubmissions(submissions);\n    }\n    return false;\n  }\n\n  // Get combined context for translation service\n  getContextForTranslation() {\n    const approvedTerms = this.getApprovedTerms();\n    const approvedAcronyms = this.getApprovedAcronyms();\n    const termsText = approvedTerms.map(item => `${item.term}: ${item.definition}`).join('\\n');\n    const acronymsText = approvedAcronyms.map(item => `${item.acronym}: ${item.fullName}`).join('\\n');\n    return {\n      userTermsText: termsText,\n      userAcronymsText: acronymsText,\n      userCombinedText: termsText + '\\n' + acronymsText\n    };\n  }\n}\n\n// Export singleton instance\nexport const userSubmissionService = new UserSubmissionService();","map":{"version":3,"names":["userSubmittedData","UserSubmissionService","constructor","storageKey","initializeStorage","existingData","localStorage","getItem","setItem","JSON","stringify","getUserSubmissions","data","parse","error","console","saveUserSubmissions","submitTerm","termData","submissions","newTerm","id","Date","now","submittedDate","toISOString","split","status","terms","push","submitAcronym","acronymData","newAcronym","acronyms","getApprovedTerms","filter","term","getApprovedAcronyms","acronym","getPendingTerms","getPendingAcronyms","approveTerm","termId","find","t","rejectTerm","getContextForTranslation","approvedTerms","approvedAcronyms","termsText","map","item","definition","join","acronymsText","fullName","userTermsText","userAcronymsText","userCombinedText","userSubmissionService"],"sources":["C:/Users/2417696/OneDrive - Cognizant/Documents/vscode/VibeCoding2025/new-consultingo/consultingo/src/services/userSubmissionService.js"],"sourcesContent":["// User submission service for handling user-submitted terms\r\nimport { userSubmittedData } from '../data/userSubmittedData';\r\n\r\nclass UserSubmissionService {\r\n  constructor() {\r\n    // Use localStorage as persistent storage simulation\r\n    this.storageKey = 'userSubmittedTerms';\r\n    this.initializeStorage();\r\n  }\r\n\r\n  initializeStorage() {\r\n    const existingData = localStorage.getItem(this.storageKey);\r\n    if (!existingData) {\r\n      localStorage.setItem(this.storageKey, JSON.stringify(userSubmittedData));\r\n    }\r\n  }\r\n\r\n  getUserSubmissions() {\r\n    try {\r\n      const data = localStorage.getItem(this.storageKey);\r\n      return data ? JSON.parse(data) : userSubmittedData;\r\n    } catch (error) {\r\n      console.error('Error reading user submissions:', error);\r\n      return userSubmittedData;\r\n    }\r\n  }\r\n\r\n  saveUserSubmissions(data) {\r\n    try {\r\n      localStorage.setItem(this.storageKey, JSON.stringify(data));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error saving user submissions:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  submitTerm(termData) {\r\n    const submissions = this.getUserSubmissions();\r\n    \r\n    const newTerm = {\r\n      ...termData,\r\n      id: `user_${Date.now()}`,\r\n      submittedDate: new Date().toISOString().split('T')[0],\r\n      status: 'pending'\r\n    };\r\n\r\n    submissions.terms.push(newTerm);\r\n    return this.saveUserSubmissions(submissions) ? newTerm : null;\r\n  }\r\n\r\n  submitAcronym(acronymData) {\r\n    const submissions = this.getUserSubmissions();\r\n    \r\n    const newAcronym = {\r\n      ...acronymData,\r\n      id: `user_${Date.now()}`,\r\n      submittedDate: new Date().toISOString().split('T')[0],\r\n      status: 'pending'\r\n    };\r\n\r\n    submissions.acronyms.push(newAcronym);\r\n    return this.saveUserSubmissions(submissions) ? newAcronym : null;\r\n  }\r\n\r\n  getApprovedTerms() {\r\n    const submissions = this.getUserSubmissions();\r\n    return submissions.terms.filter(term => term.status === 'approved');\r\n  }\r\n\r\n  getApprovedAcronyms() {\r\n    const submissions = this.getUserSubmissions();\r\n    return submissions.acronyms.filter(acronym => acronym.status === 'approved');\r\n  }\r\n\r\n  getPendingTerms() {\r\n    const submissions = this.getUserSubmissions();\r\n    return submissions.terms.filter(term => term.status === 'pending');\r\n  }\r\n\r\n  getPendingAcronyms() {\r\n    const submissions = this.getUserSubmissions();\r\n    return submissions.acronyms.filter(acronym => acronym.status === 'pending');\r\n  }\r\n\r\n  // For admin functionality (future use)\r\n  approveTerm(termId) {\r\n    const submissions = this.getUserSubmissions();\r\n    const term = submissions.terms.find(t => t.id === termId);\r\n    if (term) {\r\n      term.status = 'approved';\r\n      return this.saveUserSubmissions(submissions);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  rejectTerm(termId) {\r\n    const submissions = this.getUserSubmissions();\r\n    const term = submissions.terms.find(t => t.id === termId);\r\n    if (term) {\r\n      term.status = 'rejected';\r\n      return this.saveUserSubmissions(submissions);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Get combined context for translation service\r\n  getContextForTranslation() {\r\n    const approvedTerms = this.getApprovedTerms();\r\n    const approvedAcronyms = this.getApprovedAcronyms();\r\n\r\n    const termsText = approvedTerms\r\n      .map(item => `${item.term}: ${item.definition}`)\r\n      .join('\\n');\r\n      const acronymsText = approvedAcronyms\r\n      .map(item => `${item.acronym}: ${item.fullName}`)\r\n      .join('\\n');\r\n    \r\n    return {\r\n      userTermsText: termsText,\r\n      userAcronymsText: acronymsText,\r\n      userCombinedText: termsText + '\\n' + acronymsText\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const userSubmissionService = new UserSubmissionService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}